# Auto-generated by Lumenary

##############################################################################
# Dependencies
##############################################################################

from __future__ import annotations
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
import os
import asyncio
from concurrent.futures import ThreadPoolExecutor
from typing import Callable, Any
from functools import partial


##############################################################################
# General App
##############################################################################


app = FastAPI(
    title="Test API",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount React static files
BUILD_DIR = "static"  
try:
  app.mount("/static", StaticFiles(directory=BUILD_DIR), name="static")
  @app.get("/{full_path:path}")
  async def serve_react_app(full_path: str):
      # Path to the build directory
      filepath = os.path.join(BUILD_DIR, full_path)
      
      # If the path exists and is a file, serve it
      if os.path.isfile(filepath):
          return FileResponse(filepath)
      
      # For all other routes, serve index.html to support React Router
      index_path = os.path.join(BUILD_DIR, "index.html")
      if os.path.exists(index_path):
          return FileResponse(index_path)
      
      raise HTTPException(status_code=404, detail="File not found")
except RuntimeError:
  print("Static directory does not exist. Not serving React app.")



##############################################################################
# Synchronous Function Helpers
##############################################################################

thread_pool = ThreadPoolExecutor(max_workers=4)

async def run_sync_in_thread(func: Callable[..., Any], *args, **kwargs) -> Any:
    """Runs a synchronous function in a thread pool"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(
        thread_pool,
        partial(func, *args, **kwargs)
    )


##############################################################################
# Routes
##############################################################################

